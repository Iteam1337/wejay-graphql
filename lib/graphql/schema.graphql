type Album {
  images: [Cover!]!
  name: String!
  uri: String!
}

type Artist {
  name: String!
  uri: String!
}

type Cover {
  height: Int!
  url: String!
  width: Int!
}

type Track {
  album: Album!
  artists: [Artist!]!
  duration: Float!
  name: String!
  spotifyUri: String!
  started: Float
  user: User
}

type User {
  email: String!
  id: String!
  lastPlay: Float!
}

type Room {
  id: ID!
  isPlaying: Boolean!
  name: String!
  currentTrack: Track
  queue: [Track!]!
  users: [User]!
}

input QueueInput {
  roomName: String!
  spotifyId: String!
  userEmail: String!
  userId: String!
}

input JoinRoomInput {
  roomName: String!
  email: String!
}

type Query {
  rooms: [Room!]!
  room(name: String!): Room!
}

type Mutation {
  addRoom(roomName: String!): Room!
  joinRoom(input: JoinRoomInput!): Room!
  nextTrack(roomName: String!): Room!
  pause(roomName: String!): Boolean
  play(roomName: String!): Boolean
  queueTrack(input: QueueInput!): Track!
  search(query: String!): [Track!]!
}

type Subscription {
  onNextTrack(roomName: String!): Track
  onPause(roomName: String!): Boolean
  onPlay(roomName: String!): Boolean
  roomUpdated(roomName: String!): Room
}
